'''
### 2. 1이 될 때까지
- 어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행
- 단, 두 번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있다.
  1. N에서 1을 뺀다.
  2. N을 K로 나눈다.
- 예를 들어, N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 16, 이 후 2번 과정을 두 번 수행하면 N은 1이 된다.
   => N이 1이 되는 최소 횟수: 3회
- N과 K가 주어질 때 N이 1이 될 때까지 1번 또는 2번 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하라.
'''

N, K = map(int, input().split())

result = 0

while True:
    # target : N이 K로 나누어 떨어지는 수
    target = (N//K) * K  # N을 K로 나눈 몫 * K == N - (k로 나눈 나머지) == N이 K로 나누어 떨어지는 수

    # N이 K로 나누어 떨어질 때까지 뺄셈을 함
    result += (N - target)
    N = target

    # N이 K보다 작으면 반복문 탈출
    if N < K:
        break

    # k로 나누기
    result += 1
    N //= K

# 마지막으로 N이 1이 될 때까지 1씩 빼기
result += (N - 1)

print(result)